--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -44,6 +44,8 @@ set (project_cmake_dir ${PROJECT_SOURCE_DIR}/cmake
 
 message (STATUS "${PROJECT_NAME} version ${SDF_VERSION_FULL}")
 set (CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE ON)
+set (CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "")
+set (CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "")
 
 #============================================================================
 # We turn off extensions because (1) we do not ever want to use non-standard
@@ -112,17 +114,6 @@ set (sdf_cmake_dir ${PROJECT_SOURCE_DIR}/cmake CACHE PATH
 include (${sdf_cmake_dir}/SDFUtils.cmake)
 
 message (STATUS "\n\n====== Finding 3rd Party Packages ======")
- # Use of tinyxml. System installation on UNIX. Internal copy on WIN
-if (UNIX)
-  message (STATUS "Using system tinyxml")
-  set (USE_EXTERNAL_TINYXML True)
-elseif(WIN32)
-  message (STATUS "Using internal tinyxml code")
-  set (USE_EXTERNAL_TINYXML False)
-else()
-  message (STATUS "Unknown platform")
-  BUILD_ERROR("Unknown platform")
-endif()
 include (${sdf_cmake_dir}/SearchForStuff.cmake)
 message (STATUS "----------------------------------------\n")
 

--- a/cmake/SDFUtils.cmake
+++ b/cmake/SDFUtils.cmake
@@ -79,7 +79,9 @@ macro (sdf_install_library _name)
   install (
     TARGETS ${_name}
     EXPORT ${_name}
-    DESTINATION ${LIB_INSTALL_DIR}
+    ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+    LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+    RUNTIME DESTINATION ${BIN_INSTALL_DIR}
     COMPONENT shlib)
 
 # Export and install target
@@ -141,10 +143,6 @@ macro (sdf_build_tests)
       add_executable(${BINARY_NAME}
         ${GTEST_SOURCE_file}
         ${SDF_BUILD_TESTS_EXTRA_EXE_SRCS}
-        ${PROJECT_SOURCE_DIR}/src/win/tinyxml/tinystr.cpp
-        ${PROJECT_SOURCE_DIR}/src/win/tinyxml/tinyxmlerror.cpp
-        ${PROJECT_SOURCE_DIR}/src/win/tinyxml/tinyxml.cpp
-        ${PROJECT_SOURCE_DIR}/src/win/tinyxml/tinyxmlparser.cpp
       )
     else()
       message(FATAL_ERROR "Unsupported platform")
@@ -164,12 +162,14 @@ macro (sdf_build_tests)
         pthread
         ${tinyxml_LIBRARIES}
         ${IGNITION-MATH_LIBRARIES}
+        PkgConfig::URDF
       )
     elseif(WIN32)
       target_link_libraries(${BINARY_NAME}
         gtest.lib
         gtest_main.lib
         ${sdf_target}
+        ${tinyxml_LIBRARIES}
         ${IGNITION-MATH_LIBRARIES}
       )
 

--- a/cmake/SearchForStuff.cmake
+++ b/cmake/SearchForStuff.cmake
@@ -11,10 +11,10 @@ if (USE_EXTERNAL_TINYXML)
   # Use pkg_check_modules and fallback to manual detection (needed, at least, for MacOS)
   pkg_check_modules(tinyxml tinyxml)
   if (NOT tinyxml_FOUND)
-    find_path (tinyxml_include_dirs tinyxml.h ${tinyxml_include_dirs} ENV CPATH)
+    find_path (tinyxml_INCLUDE_DIRS tinyxml.h ${tinyxml_INCLUDE_DIRS} ENV CPATH)
     find_library(tinyxml_LIBRARIES NAMES tinyxml)
     set (tinyxml_FAIL False)
-    if (NOT tinyxml_include_dirs)
+    if (NOT tinyxml_INCLUDE_DIRS)
       message (STATUS "Looking for tinyxml headers - not found")
       set (tinyxml_FAIL True)
     endif()
@@ -54,7 +54,7 @@ endif()
 
 if (NOT DEFINED USE_INTERNAL_URDF OR NOT USE_INTERNAL_URDF)
   # check for urdfdom with pkg-config
-  pkg_check_modules(URDF urdfdom>=1.0)
+  pkg_check_modules(URDF urdfdom>=1.0 IMPORTED_TARGET)
 
   if (NOT URDF_FOUND)
     if (NOT DEFINED USE_INTERNAL_URDF)
@@ -63,10 +63,6 @@ if (NOT DEFINED USE_INTERNAL_URDF OR NOT USE_INTERNAL_URDF)
     else()
       BUILD_ERROR("Couldn't find the urdfdom >= 1.0 system installation")
     endif()
-  else()
-    # what am I doing here? pkg-config and cmake
-    set(URDF_INCLUDE_DIRS ${URDF_INCLUDEDIR})
-    set(URDF_LIBRARY_DIRS ${URDF_LIBDIR})
   endif()
 endif()
 

--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -177,7 +177,11 @@ message (STATUS "URDF_LIBRARY_DIRS=${URDF_LIBRARY_DIRS}")
 message (STATUS "URDF_LIBRARIES=${URDF_LIBRARIES}")
 
 if (NOT USE_INTERNAL_URDF)
-  target_link_libraries(${sdf_target} PRIVATE ${URDF_LIBRARIES})
+  if (TARGET PkgConfig::URDF)
+    target_link_libraries(${sdf_target} PRIVATE PkgConfig::URDF)
+  else()
+    target_link_libraries(${sdf_target} PRIVATE ${URDF_LIBRARIES})
+  endif()
 endif()
 
 sdf_install_library(${sdf_target})
